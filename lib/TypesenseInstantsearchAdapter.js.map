{"version":3,"sources":["../src/TypesenseInstantsearchAdapter.js"],"names":["TypesenseInstantsearchAdapter","options","updateConfiguration","searchClient","clearCache","search","instantsearchRequests","searchTypesenseAndAdapt","searchForFacetValues","searchTypesenseForFacetValuesAndAdapt","console","log","_adaptAndPerformTypesenseRequest","typesenseResponse","adaptedResponses","results","map","typesenseResult","index","_validateTypesenseResult","responseAdapter","SearchResponseAdapter","configuration","adapt","error","FacetSearchResponseAdapter","requestAdapter","SearchRequestAdapter","typesenseClient","request","TypesenseSearchClient","server","Configuration","validate","Error","code","hits","grouped_hits"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { Configuration } from \"./Configuration\";\nimport { SearchClient as TypesenseSearchClient } from \"typesense\";\nimport { SearchRequestAdapter } from \"./SearchRequestAdapter\";\nimport { SearchResponseAdapter } from \"./SearchResponseAdapter\";\nimport { FacetSearchResponseAdapter } from \"./FacetSearchResponseAdapter\";\n\nexport default class TypesenseInstantsearchAdapter {\n  constructor(options) {\n    this.updateConfiguration(options);\n    this.searchClient = {\n      clearCache: () => this.clearCache(),\n      search: (instantsearchRequests) => this.searchTypesenseAndAdapt(instantsearchRequests),\n      searchForFacetValues: (instantsearchRequests) =>\n        this.searchTypesenseForFacetValuesAndAdapt(instantsearchRequests),\n    };\n  }\n\n  async searchTypesenseAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      console.log(\"request\", instantsearchRequests);\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new SearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index],\n          this.configuration,\n          typesenseResponse.results\n        );\n        return responseAdapter.adapt();\n      });\n\n      return {\n        results: adaptedResponses,\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async searchTypesenseForFacetValuesAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new FacetSearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index],\n          this.configuration\n        );\n        return responseAdapter.adapt();\n      });\n\n      return adaptedResponses;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async _adaptAndPerformTypesenseRequest(instantsearchRequests) {\n    const requestAdapter = new SearchRequestAdapter(instantsearchRequests, this.typesenseClient, this.configuration);\n    const typesenseResponse = await requestAdapter.request();\n    return typesenseResponse;\n  }\n\n  clearCache() {\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    return this.searchClient;\n  }\n\n  updateConfiguration(options) {\n    this.configuration = new Configuration(options);\n    this.configuration.validate();\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    return true;\n  }\n\n  _validateTypesenseResult(typesenseResult) {\n    if (typesenseResult.error) {\n      throw new Error(`${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n    if (!typesenseResult.hits && !typesenseResult.grouped_hits) {\n      throw new Error(`Did not find any hits. ${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n  }\n}\n"],"file":"TypesenseInstantsearchAdapter.js"}